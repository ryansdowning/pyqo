import { useEffect, useState } from "react";

import createClient from "openapi-fetch";
import { useLocalStorage } from "usehooks-ts";

import { notifications } from "@mantine/notifications";

import type { paths } from "../schema"; // generated by openapi-typescript
import { drfErrorToString } from "./format";

export const BASE_URL = "http://127.0.0.1:8000";
export const client = createClient<paths>({ baseUrl: BASE_URL });
export const PAGE_SIZE = 25;

type ApiResult<Data, Error> =
  | {
      success: true;
      data: Data;
    }
  | { success: false; error: Error };

type RouteQueryParams<
  Path extends keyof paths,
  Method extends keyof paths[Path]
> = paths[Path][Method] extends { parameters: { query?: infer Params } }
  ? Params
  : undefined;

type RoutePathParams<
  Path extends keyof paths,
  Method extends keyof paths[Path]
> = paths[Path][Method] extends { parameters: { path?: infer Params } }
  ? Params
  : undefined;

type RouteBody<
  Path extends keyof paths,
  Method extends keyof paths[Path]
> = paths[Path][Method] extends {
  requestBody: { content: { "application/json": infer Body } };
}
  ? Body
  : undefined;

// Generic FetchOptions type that dynamically defines `params` and `body`
type FetchOptions<
  Path extends keyof paths,
  Method extends keyof paths[Path]
> = {
  query?: RouteQueryParams<Path, Method>;
  body?: RouteBody<Path, Method>;
} & (RoutePathParams<Path, Method> extends undefined
  ? {} // If path params are undefined, we can omit it.
  : { path: RoutePathParams<Path, Method> }); // Otherwise, it must be required.

interface UseQueryOptions<Result, Data, Failure> {
  executeQuery: () => Promise<Result>;
  getDataOrErrorFromResponse: (result: Result) => ApiResult<Data, Failure>;
}

function useHeaders() {
  const [token] = useLocalStorage("token", "");

  if (!token) {
    return undefined;
  }

  return {
    "Content-Type": "application/json",
    Authorization: `Token ${token}`,
  };
}

function useQuery<Result, Data>({
  executeQuery,
  getDataOrErrorFromResponse,
}: UseQueryOptions<Result, Data, string>) {
  const [fetching, setFetching] = useState(false);
  const [data, setData] = useState<Data | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    setFetching(true);
    executeQuery()
      .then(getDataOrErrorFromResponse)
      .then((result) =>
        result.success ? setData(result.data) : setError(result.error)
      )
      .finally(() => setFetching(false));
  }, []);

  return { fetching, data, error };
}

export function useListItems(params: FetchOptions<"/app/items/", "get">) {
  const headers = useHeaders();

  return useQuery({
    executeQuery: () => client.GET("/app/items/", { headers, params }),
    getDataOrErrorFromResponse: (result) => {
      if (result.error) {
        const error = drfErrorToString(result.error);
        notifications.show({
          title: "Failed to load codes",
          message: error,
          color: "red",
        });
        return { success: false, error };
      }
      return { success: true, data: result.data };
    },
  });
}

export function useGetItem(params: FetchOptions<"/app/items/{id}/", "get">) {
  const headers = useHeaders();

  return useQuery({
    executeQuery: () => client.GET("/app/items/{id}/", { headers, params }),
    getDataOrErrorFromResponse: (result) => {
      if (result.error) {
        const error = drfErrorToString(result.error);
        notifications.show({
          title: "Failed to load item",
          message: error,
          color: "red",
        });
        return { success: false, error };
      }
      return { success: true, data: result.data };
    },
  });
}

export function useListProperties(
  params: FetchOptions<"/app/properties/", "get">
) {
  const headers = useHeaders();

  return useQuery({
    executeQuery: () => client.GET("/app/properties/", { headers, params }),
    getDataOrErrorFromResponse: (result) => {
      if (result.error) {
        const error = drfErrorToString(result.error);
        notifications.show({
          title: "Failed to load properties",
          message: error,
          color: "red",
        });
        return { success: false, error };
      }
      return { success: true, data: result.data };
    },
  });
}

export function useGetProperty(
  params: FetchOptions<"/app/properties/{id}/", "get">
) {
  const headers = useHeaders();

  return useQuery({
    executeQuery: () =>
      client.GET("/app/properties/{id}/", { headers, params }),
    getDataOrErrorFromResponse: (result) => {
      if (result.error) {
        const error = drfErrorToString(result.error);
        notifications.show({
          title: "Failed to load property",
          message: error,
          color: "red",
        });
        return { success: false, error };
      }
      return { success: true, data: result.data };
    },
  });
}
